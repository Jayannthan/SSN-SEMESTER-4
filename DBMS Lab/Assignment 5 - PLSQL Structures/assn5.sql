-- Consider the following relations for the Bakery database:
-- CUSTOMERS (cid, fname, lname)
-- PRODUCTS (pid, flavor, food, price)
-- RECEIPTS (rno, rdate, cid)
-- ITEM_LIST (rno, ordinal, item)

-- 1. Check whether the given combination of food and flavor is available. If any one or both are not available, display the relevant message.

SET SERVEROUTPUT ON;
DECLARE
	PRODUCTROWS PRODUCTS%ROWTYPE;
	COUNT_PRODUCTS NUMBER;
	SEARCHFOOD PRODUCTS.FOOD%TYPE;
	SEARCHFLAVOR PRODUCTS.FLAVOR%TYPE;
BEGIN
	SEARCHFOOD:='&FOOD_TO_SEARCH';
	SEARCHFLAVOR:='&FLAVOR_TO_SEARCH';
	COUNT_PRODUCTS:=0;  
	SELECT COUNT(*) INTO COUNT_PRODUCTS FROM PRODUCTS WHERE LOWER(FOOD)=LOWER(SEARCHFOOD) AND LOWER(FLAVOR)=LOWER(SEARCHFLAVOR);
	IF COUNT_PRODUCTS!=0 THEN
		DBMS_OUTPUT.PUT_LINE('THE COMBINATION YOU ASKED FOR IS AVAILABLE');
		DBMS_OUTPUT.PUT_LINE('THERE IS '|| SEARCHFOOD ||' WITH ' || SEARCHFLAVOR ||' FLAVOR');
		SELECT * INTO PRODUCTROWS FROM PRODUCTS WHERE LOWER(FOOD)=LOWER(SEARCHFOOD) AND LOWER(FLAVOR)=LOWER(SEARCHFLAVOR);
		DBMS_OUTPUT.PUT_LINE(PRODUCTROWS.PID||'   '||PRODUCTROWS.FLAVOR||'   '||PRODUCTROWS.FOOD||'   '||PRODUCTROWS.PRICE);
	ELSIF COUNT_PRODUCTS=0 THEN
		DBMS_OUTPUT.PUT_LINE('THE COMBINATION YOU ASKED FOR IS NOT AVAILABLE');
	END IF;

	IF COUNT_PRODUCTS=0 THEN
		SELECT COUNT(*) INTO COUNT_PRODUCTS FROM PRODUCTS WHERE  LOWER(FOOD)=LOWER(SEARCHFOOD);
		IF COUNT_PRODUCTS!=0 THEN
			DBMS_OUTPUT.PUT_LINE('THE COMBINATION YOU ASKED FOR IS NOT AVAILABLE');
			DBMS_OUTPUT.PUT_LINE('THE FOOD YOU ASKED FOR IS AVAILABLE IN COMNIATION WITH OTHER FLAVORS');
		END IF;
	END IF;
	IF COUNT_PRODUCTS=0 THEN
		SELECT COUNT(*) INTO COUNT_PRODUCTS FROM PRODUCTS WHERE LOWER(FLAVOR)=LOWER(SEARCHFLAVOR);
		IF COUNT_PRODUCTS!=0 THEN
			DBMS_OUTPUT.PUT_LINE('THE COMBINATION YOU ASKED FOR IS NOT AVAILABLE');
			DBMS_OUTPUT.PUT_LINE('THE FLAVOR YOU ASKED FOR IS AVAILABLE IN COMNIATION WITH OTHER FOODS');
		END IF;
	END IF;
	IF COUNT_PRODUCTS=0 THEN
		SELECT COUNT(*) INTO COUNT_PRODUCTS FROM PRODUCTS WHERE LOWER(FOOD)<>LOWER(SEARCHFOOD) AND LOWER(FLAVOR)<>LOWER(SEARCHFLAVOR);
		IF COUNT_PRODUCTS!=0 THEN
			DBMS_OUTPUT.PUT_LINE('THE COMBINATION YOU ASKED FOR IS NOT AVAILABLE');
			DBMS_OUTPUT.PUT_LINE('BOTH FOOD AND FLAVOR IS NOT AVAILABLE');
		END IF;
	END IF;
END;
/

-- 2. On a given date, find the number of items sold (Use Implicit cursor).

-- RDATE = 12-OCT-07 VALID
-- RDATE = 12-DEC-07 INVALID


-- SET SERVEROUTPUT ON;
-- DECLARE
--	 COUNTITEMS NUMBER;
--	 GIVENDATE DATE;
-- BEGIN
--	 GIVENDATE:=TO_DATE('&SEARCHDATE','DD-MM-YY');
--	 SELECT COUNT(ITEM) INTO COUNTITEMS FROM ITEM_LIST NATURAL JOIN RECEIPTS GROUP BY RDATE HAVING RDATE=GIVENDATE;
--	 DBMS_OUTPUT.PUT_LINE('THE NUMBER OF ITEM SOLD ON '||GIVENDATE||' = '||COUNTITEMS);
--	 EXCEPTION
--	 WHEN NO_DATA_FOUND THEN
--		 DBMS_OUTPUT.PUT_LINE('NO ITEMS SOLD ON '||GIVENDATE);
-- END;
-- /

SET SERVEROUTPUT ON;
DECLARE
	COUNTITEMS NUMBER;
	GIVENDATE DATE;
BEGIN
	GIVENDATE:=TO_DATE('&SEARCHDATE','DD-MM-YY');
	SELECT COUNT(ITEM) INTO COUNTITEMS FROM ITEM_LIST JOIN RECEIPTS USING(RNO) GROUP BY RDATE HAVING RDATE=GIVENDATE;
	DBMS_OUTPUT.PUT_LINE('THE NUMBER OF ITEM SOLD ON '||GIVENDATE||' = '||COUNTITEMS);
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO ITEMS SOLD ON '||GIVENDATE);
END;
/


-- 3. An user desired to buy the product with the specific price. Ask the user for a price, 
-- find the food item(s) that is equal or closest to the desired price. Print the product
-- number, food type, flavor and price. Also print the number of items that is equal or
-- closest to the desired price.


SET SERVEROUTPUT ON;
DECLARE
	SPECIFICPRICE PRODUCTS.PRICE%TYPE;
	CURSOR SPECIFIC_PRODUCTS IS SELECT * FROM PRODUCTS WHERE PRICE BETWEEN FLOOR(SPECIFICPRICE-0.1) AND CEIL(SPECIFICPRICE+0.1);
	PRODUCTROWS SPECIFIC_PRODUCTS%ROWTYPE;
BEGIN
	SPECIFICPRICE:='&PRICE_TO_SEARCH';
	OPEN SPECIFIC_PRODUCTS;
	DBMS_OUTPUT.PUT_LINE('PRODUCT LIST:');
	LOOP
		FETCH SPECIFIC_PRODUCTS INTO PRODUCTROWS;
		IF SPECIFIC_PRODUCTS%NOTFOUND THEN
			EXIT;
		ELSE
			DBMS_OUTPUT.PUT_LINE(PRODUCTROWS.PID||'  '||PRODUCTROWS.FOOD||'  '||PRODUCTROWS.FLAVOR||'  '||PRODUCTROWS.PRICE);
		END IF;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(SPECIFIC_PRODUCTS%ROWCOUNT||' PRODUCTS FOUND');
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('NO PRODUCTS FOUND');
	CLOSE SPECIFIC_PRODUCTS;
END;
/

-- WORKing trial
-- SET SERVEROUTPUT ON;
-- DECLARE
--	 SPECIFICPRICE PRODUCTS.PRICE%TYPE;
--	 CURSOR SPECIFIC_PRODUCTS IS SELECT * FROM PRODUCTS WHERE PRICE BETWEEN (SPECIFICPRICE-0.5) AND (SPECIFICPRICE+0.5);
--	 PRODUCTROWS SPECIFIC_PRODUCTS%ROWTYPE;
-- BEGIN
--	 SPECIFICPRICE:=&'PRICE_TO_SEARCH';
--	 OPEN SPECIFIC_PRODUCTS;
--	 DBMS_OUTPUT.PUT_LINE('PRODUCT LIST:');
--	 LOOP
--		 FETCH SPECIFIC_PRODUCTS INTO PRODUCTROWS;
--		 IF SPECIFIC_PRODUCTS%NOTFOUND THEN
--			 EXIT;
--		 ELSE
--			 DBMS_OUTPUT.PUT_LINE(PRODUCTROWS.PID||'  '||PRODUCTROWS.FOOD||'  '||PRODUCTROWS.FLAVOR||'  '||PRODUCTROWS.PRICE);
--		 END IF;
--	 END LOOP;
--	 DBMS_OUTPUT.PUT_LINE( SPECIFIC_PRODUCTS%ROWCOUNT ||' PRODUCTS FOUND');
--	 CLOSE SPECIFIC_PRODUCTS;
-- END;
-- /


-- 4. Display the customer name along with the details of item and its quantity ordered for
-- the given order number. Also calculate the total quantity ordered as shown below:
-- SQL> /
-- Enter value for rid: 51991
-- old 11: rid:=&rid;
-- new 11: rid:=51991;
-- Customer name: SOPKO RAYFORD
-- Ordered Following Items:
-- FOOD FLAVOR QTY
-- Apple Pie 1
-- Chocolate Tart 1
-- Apple Tart 1
-- Truffle Cake 1
-- Total Qty: 4

DECLARE
	ORDER_NUMBER ITEM_LIST.RNO%TYPE;
	CFNAME CUSTOMERS.FNAME%TYPE;
	CLNAME CUSTOMERS.LNAME%TYPE;
	TOTAL_ITEM NUMBER:=0;
	CURSOR DETAILS IS SELECT FOOD,FLAVOR,COUNT(*) AS QUANTITY FROM ITEM_LIST,PRODUCTS WHERE RNO=ORDER_NUMBER AND PID=ITEM GROUP BY FOOD,FLAVOR;
	DETAILROW DETAILS%ROWTYPE;
BEGIN
	ORDER_NUMBER:='&ORDER_NUMBER_TO_SEARCH';
	SELECT FNAME,LNAME INTO CFNAME,CLNAME FROM CUSTOMERS JOIN RECEIPTS USING(CID) WHERE RNO=ORDER_NUMBER;
	DBMS_OUTPUT.PUT_LINE('CUSTOMER NAME: '||CFNAME||' '||CLNAME);
	OPEN DETAILS;
	DBMS_OUTPUT.PUT_LINE('FOOD			FLAVOR			 QUANTITY');
	LOOP
		FETCH DETAILS INTO DETAILROW;
		IF DETAILS%NOTFOUND THEN
			EXIT;
		ELSE
			DBMS_OUTPUT.PUT_LINE(DETAILROW.FOOD||'			 '||DETAILROW.FLAVOR||'			 '||DETAILROW.QUANTITY);
			TOTAL_ITEM:=TOTAL_ITEM+DETAILROW.QUANTITY;
		END IF;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('TOTAL QUANTITY = '||TOTAL_ITEM);
	CLOSE DETAILS;
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('INVALID ORDER NUMBER!');
END;
/