-- Consider the following relations for the Bakery database:
-- CUSTOMERS (cid, fname, lname)
-- PRODUCTS (pid, flavor, food, price)
-- RECEIPTS (rno, rdate, cid)
-- ITEM_LIST (rno, ordinal, item)

SET SERVEROUTPUT ON;

-- Write a PL/SQL Trigger for the following:
-- 1. The combination of Flavor and Food determines the product id. Hence, while
-- inserting a new instance into the Products relation, ensure that the same combination
-- of Flavor and Food is not already available.

SET SERVEROUTPUT ON;

CREATE OR REPLACE TRIGGER BEFORE_PRODUCT_INSERT
BEFORE INSERT ON PRODUCTS FOR EACH ROW
DECLARE 
    CT NUMBER:=0;
    CURSOR PROCURSOR IS SELECT * FROM PRODUCTS
    WHERE FOOD=:NEW.FOOD AND FLAVOR=:NEW.FLAVOR;
    RECORD PROCURSOR%ROWTYPE;
BEGIN
    OPEN PROCURSOR;
    FETCH PROCURSOR INTO RECORD;
    IF PROCURSOR%NOTFOUND THEN
        CT:=1;
    END IF;
    CLOSE PROCURSOR;
    IF CT=0 THEN
        RAISE_APPLICATION_ERROR(-20000,'COMBINATION ALREADY AVAILABLE');
    END IF;
END;
/

-- 2. While entering an item into the item_list relation, update the amount in Receipts with
-- the total amount for that receipt number.

SAVEPOINT SAVE1;
ALTER TABLE RECEIPTS
ADD AMT NUMBER;

SELECT * FROM RECEIPTS 
WHERE RNO=51991;

CREATE OR REPLACE TRIGGER TRIGGER2
BEFORE INSERT ON ITEM_LIST FOR EACH ROW
BEGIN
    UPDATE RECEIPTS
    SET AMT=(SELECT SUM(PRICE) FROM ITEM_LIST,PRODUCTS
    WHERE RNO=:NEW.RNO AND PID=ITEM) WHERE RNO=:NEW.RNO;
    UPDATE RECEIPTS
    SET AMT=AMT+(SELECT PRICE FROM PRODUCTS
    WHERE PID=:NEW.ITEM) WHERE RNO=:NEW.RNO;
END;
/

INSERT INTO ITEM_LIST VALUES(51991,5,'45-VA');
SELECT * FROM RECEIPTS 
WHERE RNO=51991;

ROLLBACK;

-- 3. Implement the following constraints for Item_list relation:
-- a. A receipt can contain a maximum of five items only.
-- b. A receipt should not allow an item to be purchased more than thrice.

SAVEPOINT SAVE1;

CREATE OR REPLACE TRIGGER TRIGGER3
BEFORE INSERT ON ITEM_LIST FOR EACH ROW
DECLARE
    CURSOR RNOCOUNT IS SELECT COUNT(*) AS COUNT1 FROM ITEM_LIST
    WHERE RNO=:NEW.RNO;
    CURSOR RNO_ITEM_COUNT IS SELECT COUNT(*) AS COUNT2 FROM ITEM_LIST
    WHERE RNO=:NEW.RNO AND ITEM=:NEW.ITEM;
    RNO_ROW RNOCOUNT%ROWTYPE;
    RNO_ITEM_ROW RNO_ITEM_COUNT%ROWTYPE;
BEGIN
    OPEN RNOCOUNT;
    OPEN RNO_ITEM_COUNT;
    FETCH RNOCOUNT INTO RNO_ROW;
    FETCH RNO_ITEM_COUNT INTO RNO_ITEM_ROW;
    IF RNO_ROW.COUNT1>=5 AND RNO_ITEM_ROW.COUNT2>=3 THEN
        RAISE_APPLICATION_ERROR(-20001,'THE RECEIPT ALREADY HAS 5 ITEMS AND THE ITEM IS PURCHASED THRICE');
    ELSIF RNO_ROW.COUNT1>=5 THEN
        RAISE_APPLICATION_ERROR(-20002,'THE RECEIPT ALREADY HAS 5 ITEMS');
    ELSIF RNO_ITEM_ROW.COUNT2>=3 THEN
        RAISE_APPLICATION_ERROR(-20003,'THE ITEM IS PURCHASED THRICE');
    END IF;
    CLOSE RNO_ITEM_COUNT;
    CLOSE RNOCOUNT;
END;
/

INSERT INTO ITEM_LIST VALUES(52761,6,'90-ALM-I');
INSERT INTO ITEM_LIST VALUES(83085,6,'45-CH');
INSERT INTO ITEM_LIST VALUES(32565,4,'50-APP');
INSERT INTO ITEM_LIST VALUES(32565,4,'50-APP');

ROLLBACK;